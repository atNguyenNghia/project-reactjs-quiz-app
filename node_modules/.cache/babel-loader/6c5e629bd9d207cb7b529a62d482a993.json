{"ast":null,"code":"import { shuffleArray } from './utils';\nexport let Difficulty;\n\n(function (Difficulty) {\n  Difficulty[\"EASY\"] = \"easy\";\n  Difficulty[\"MEDIUM\"] = \"medium\";\n  Difficulty[\"HARD\"] = \"hard\";\n})(Difficulty || (Difficulty = {}));\n\nexport const fetchQuizQuestions = async (amount, difficulty) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map(question => ({ ...question,\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n  }));\n};","map":{"version":3,"sources":["/Users/nguyennghia/Documents/Github/project-reactjs-quiz-app/src/API.ts"],"names":["shuffleArray","Difficulty","fetchQuizQuestions","amount","difficulty","endpoint","data","fetch","json","results","map","question","answers","incorrect_answers","correct_answer"],"mappings":"AACA,SAAQA,YAAR,QAA2B,SAA3B;AAeA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAKZ,OAAO,MAAMC,kBAAkB,GAAG,OAAOC,MAAP,EAAwBC,UAAxB,KAClC;AACI,QAAMC,QAAQ,GAAI,sCAAqCF,MAAO,eAAcC,UAAW,gBAAvF;AACA,QAAME,IAAI,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAAnB;AACA,SAAOF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,QAAD,KAAyB,EACzC,GAAGA,QADsC;AAEzCC,IAAAA,OAAO,EAAEZ,YAAY,CAAC,CAClB,GAAGW,QAAQ,CAACE,iBADM,EAElBF,QAAQ,CAACG,cAFS,CAAD;AAFoB,GAAzB,CAAjB,CAAP;AAOH,CAXM","sourcesContent":["import React from \"react\";\nimport {shuffleArray} from './utils'\n\nexport type Question = {\n    category : string;\n    correct_answer : string;\n    difficulty: string;\n    incorrect_answers : string [];\n    question: string;\n    type: string;\n\n};\n\nexport type QuestionState = Question & {answers : string []};\n\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\nexport const fetchQuizQuestions = async (amount :number , difficulty : Difficulty)=>\n{\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => ({\n            ...question,\n            answers: shuffleArray([\n                ...question.incorrect_answers,\n                question.correct_answer,\n            ]),\n    }));\n};"]},"metadata":{},"sourceType":"module"}