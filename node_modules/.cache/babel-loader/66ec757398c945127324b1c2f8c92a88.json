{"ast":null,"code":"var _jsxFileName = \"/Users/nguyennghia/Documents/Github/project-reactjs-quiz-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API'; // components\n\nimport QuestionCard from './components/QuestionCard';\nimport { Difficulty } from './API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUerAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestion = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestion);\n    setScore(0);\n    setUerAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {};\n\n  const nextQuestion = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start\",\n      onClick: startTrivia,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score\",\n      children: \"Score: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 22\n    }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Questions ... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n      questionNr: number + 1,\n      totalQuestions: TOTAL_QUESTIONS,\n      question: questions[number].question,\n      answers: questions[number].answers,\n      userAnswer: userAnswers ? userAnswers[number] : undefined,\n      callback: checkAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next\",\n      onClick: nextQuestion,\n      children: \"Next Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"3N1t29XYeiberCVLu9W1fVkCf30=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nguyennghia/Documents/Github/project-reactjs-quiz-app/src/App.tsx"],"names":["React","useState","fetchQuizQuestions","QuestionCard","Difficulty","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUerAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","newQuestion","EASY","checkAnswer","e","nextQuestion","length","question","answers","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,kBAAR,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAEA,SAAuBC,UAAvB,QAAwC,OAAxC;;AASA,MAAMC,eAAe,GAAI,EAAzB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,OAAD,EAAWC,UAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,SAAD,EAAaC,YAAb,IAA6BT,QAAQ,CAAkB,EAAlB,CAA3C;AACA,QAAM,CAACU,MAAD,EAAUC,SAAV,IAAuBX,QAAQ,CAAC,CAAD,CAArC;AACA,QAAM,CAACY,WAAD,EAAeC,aAAf,IAAgCb,QAAQ,CAAiB,EAAjB,CAA9C;AACA,QAAM,CAACc,KAAD,EAASC,QAAT,IAAqBf,QAAQ,CAAC,CAAD,CAAnC;AACA,QAAM,CAACgB,QAAD,EAAYC,WAAZ,IAA2BjB,QAAQ,CAAC,IAAD,CAAzC;AAEAkB,EAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;;AAEA,QAAMY,WAAW,GAAG,YAAY;AAC9Bb,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAU,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,UAAMI,WAAW,GAAG,MAAMpB,kBAAkB,CAC1CG,eAD0C,EAE1CD,UAAU,CAACmB,IAF+B,CAA5C;AAIAb,IAAAA,YAAY,CAACY,WAAD,CAAZ;AACAN,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAF,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAF,IAAAA,SAAS,CAAC,CAAD,CAAT;AACAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAZD;;AAaA,QAAMgB,WAAW,GAAIC,CAAD,IAA2C,CAE9D,CAFD;;AAGA,QAAMC,YAAY,GAAG,MAAM,CAE1B,CAFD;;AAGA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGT,QAAQ,IAAIJ,WAAW,CAACc,MAAZ,KAAuBtB,eAAnC,gBACK;AAAQ,MAAA,SAAS,EAAC,OAAlB;AAA0B,MAAA,OAAO,EAAEgB,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADL,GAIC,IANJ,EAQG,CAACJ,QAAD,gBAAc;AAAG,MAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd,GAAiD,IARpD,EASGV,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATd,EAUI,CAACA,OAAD,IAAY,CAACU,QAAb,iBACA,QAAC,YAAD;AACE,MAAA,UAAU,EAAEN,MAAM,GAAG,CADvB;AAEE,MAAA,cAAc,EAAIN,eAFpB;AAGE,MAAA,QAAQ,EAAII,SAAS,CAACE,MAAD,CAAT,CAAkBiB,QAHhC;AAIE,MAAA,OAAO,EAAInB,SAAS,CAACE,MAAD,CAAT,CAAkBkB,OAJ/B;AAKE,MAAA,UAAU,EAAIhB,WAAW,GAAGA,WAAW,CAACF,MAAD,CAAd,GAAyBmB,SALpD;AAME,MAAA,QAAQ,EAAIN;AANd;AAAA;AAAA;AAAA;AAAA,YAXJ,eAoBE;AAAQ,MAAA,SAAS,EAAC,MAAlB;AAAyB,MAAA,OAAO,EAAIE,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAvDD;;GAAMpB,G;;KAAAA,G;AAyDN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport {fetchQuizQuestions} from './API'\n// components\nimport QuestionCard from './components/QuestionCard';\n\nimport {QuestionState, Difficulty} from './API';\n\ntype AnswerObject = {\n  question: string;\n  answer : string;\n  correct : boolean;\n  corerctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS  = 10;\n\nconst App = () => {\n  const [loading , setLoading ] = useState(false);\n  const [questions , setQuestions] = useState<QuestionState[]>([]);\n  const [number , setNumber] = useState(0);\n  const [userAnswers , setUerAnswers] = useState<AnswerObject[]>([]);\n  const [score , setScore] = useState(0);\n  const [gameOver , setGameOver] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestion = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestion);\n    setScore(0);\n    setUerAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n  const checkAnswer = (e:React.MouseEvent<HTMLButtonElement>) => {\n\n  }\n  const nextQuestion = () => {\n\n  }\n  return (\n    <div>\n      <h1>React Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n            <button className='start' onClick={startTrivia}>\n              Start  \n            </button>\n      ):null}\n    \n      {!gameOver ?   <p className='score'>Score: </p> : null }\n      {loading && <p>Loading Questions ... </p>  }\n      { !loading && !gameOver && (\n        <QuestionCard \n          questionNr={number + 1}\n          totalQuestions = {TOTAL_QUESTIONS}\n          question = {questions[number].question}\n          answers = {questions[number].answers}\n          userAnswer = {userAnswers ? userAnswers[number] : undefined}\n          callback = {checkAnswer}\n        />\n      )}\n      <button className='next' onClick = {nextQuestion}>\n        Next Question\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}