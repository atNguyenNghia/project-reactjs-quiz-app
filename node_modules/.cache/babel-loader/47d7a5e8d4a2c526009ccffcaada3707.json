{"ast":null,"code":"var _jsxFileName = \"/Users/nguyennghia/Documents/Github/project-reactjs-quiz-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API'; // components\n\nimport QuestionCard from './components/QuestionCard';\nimport { Difficulty } from './API';\nimport { GlobalStyle } from './App.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestion = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestion);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      // user \n      const answer = e.currentTarget.value; // check answer agian\n\n      const correct = questions[number].correct_answer === answer; // add score if answer\n\n      if (correct) setScore(prev => prev + 1); // save answer in the array for user answer\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //  move on to the next question \n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"React Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: startTrivia,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score: \", score, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 22\n      }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Questions ... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n        questionNr: number + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[number].question,\n        answers: questions[number].answers,\n        userAnswer: userAnswers ? userAnswers[number] : undefined,\n        callback: checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next\",\n        onClick: nextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"NZ+oXzmA6atFM3Ej2Ur4/epsil8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nguyennghia/Documents/Github/project-reactjs-quiz-app/src/App.tsx"],"names":["React","useState","fetchQuizQuestions","QuestionCard","Difficulty","GlobalStyle","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","newQuestion","EASY","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","length","answers","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {fetchQuizQuestions} from './API'\n// components\nimport QuestionCard from './components/QuestionCard';\n\nimport {QuestionState, Difficulty} from './API';\n\nimport {GlobalStyle} from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer : string;\n  correct : boolean;\n  corerctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS  = 10;\n\nconst App = () => {\n  const [loading , setLoading ] = useState(false);\n  const [questions , setQuestions] = useState<QuestionState[]>([]);\n  const [number , setNumber] = useState(0);\n  const [userAnswers , setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score , setScore] = useState(0);\n  const [gameOver , setGameOver] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestion = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestion);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n  const checkAnswer = (e:React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver){\n      // user \n      const answer = e.currentTarget.value;\n      // check answer agian\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer\n      if(correct ) setScore(prev => prev + 1);\n      // save answer in the array for user answer\n      const answerObject:any = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev , answerObject]);\n    }\n  }\n  const nextQuestion = () => {\n    //  move on to the next question \n    const nextQuestion = number + 1;\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true);\n\n    }else{\n      setNumber(nextQuestion);\n    }\n  }\n  return (\n    <>\n    <GlobalStyle/>\n    <div>\n      <h1>React Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n            <button className='start' onClick={startTrivia}>\n              Start  \n            </button>\n      ):null}\n    \n      {!gameOver ?   <p className='score'>Score: {score} </p> : null }\n      {loading && <p>Loading Questions ... </p>  }\n      { !loading && !gameOver && (\n        <QuestionCard \n          questionNr={number + 1}\n          totalQuestions = {TOTAL_QUESTIONS}\n          question = {questions[number].question}\n          answers = {questions[number].answers}\n          userAnswer = {userAnswers ? userAnswers[number] : undefined}\n          callback = {checkAnswer}\n        />\n      )}\n      {\n        !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n        <button className='next'  onClick = {nextQuestion}>\n          Next Question\n        </button>\n      ):null}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}